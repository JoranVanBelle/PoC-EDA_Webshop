server:
  port: 1083

spring:
  application:
    name: EDA webshop
  
  kafka:
    bootstrap:
      servers:  broker:29092
    properties:
      schema:
        registry:
          url: http://localhost:8081
    inventoryTopic: Webshop.Inventory
    pricingTopic: Webshop.Pricing
    transportTopic: Webshop.Transport
    orderTopic: Webshop.Order
    payedTopic: Webshop.Payed

    consumer:
      bootstrapServer: broker:29092
      groupId: adapter_mvb
      autoOffsetReset: earliest
      keyDeserializer: org.apache.kafka.common.serialization.StringDeserializer
      valueDeserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
      schemaRegistry: http://localhost:8081

    producer:
      bootstrapServer: broker:29092
      acks: all
      retries: 0
      keySerializer: org.apache.kafka.common.serialization.StringSerializer
      valueSerializer: io.confluent.kafka.serializers.KafkaAvroSerializer
      schemaRegistry: http://localhost:8081

inventory:
  datasource:
    url: jdbc:mysql://inventory :3306/user
    password: mysecretpassword
    username: root

pricing:
  datasource:
    url: jdbc:mysql://pricing:3306/user
    password: mysecretpassword
    username: root

transport:
  datasource:
    url: jdbc:mysql://transport:3306/user
    password: mysecretpassword
    username: root

order:
  datasource:
    url: jdbc:mysql://order:3306/user
    password: mysecretpassword
    username: root

user:
  datasource:
    url: jdbc:mysql://user:3306/user
    password: mysecretpassword
    username: root

payment:
  datasource:
    url: jdbc:mysql://payment:3306/payment
    password: mysecretpassword
    username: root

orderedtopaid:
  applicationId: OrderPaid
  bootstrapServer: broker:29092
  keySerDes: org.apache.kafka.common.serialization.StringSerde
  valueSerDes: io.confluent.kafka.streams.serdes.avro.SpecificAvroSerde
  schemaRegistry: http://localhost:8081
  input: Webshop.Order
  topic: Webshop.Payed
